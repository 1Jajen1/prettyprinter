{-# LANGUAGE OverloadedStrings #-}

module Main (main) where



import Prelude hiding (words)

import qualified Data.List                             as L
import           Data.Text                             (Text)
import qualified Data.Text                             as T
import qualified Data.Text.IO                          as T
import           Data.Text.Prettyprint.Doc
import           Data.Text.Prettyprint.Doc.Render.Text



main :: IO ()
main = (T.putStrLn . renderStrict . layoutPretty layoutOptions) readmeContents
  where
    layoutOptions = LayoutOptions { layoutRibbonFraction = 1, layoutPageWidth = CharsPerLine 80 }

readmeContents :: Doc ann
readmeContents = (mconcat . L.intersperse vspace)
    [ htmlComment "This file was auto-generated by the 'readme' makefile target."

    , h1 "Prettyprinter Ã  la Wadler/Leijen"

    , "Master build: [![status](https://travis-ci.org/quchen/prettyprinter.svg?branch=master)](https://travis-ci.org/quchen/prettyprinter)"
    , paragraph "This module defines a prettyprinter to format text in a\
        \ flexible and convenient way. The idea is to combine a document out\
        \ of many small components, then using a layouter to convert it to an\
        \ easily renderable simple document, which can then be rendered to a\
        \ variety of formats, for example plain `Text`, or Markdown. *What you\
        \ are reading right now was generated by this library (see `GenerateReadme.hs`).*"
    , paragraph "The `wl-pprint` family consists of:"
    , (indent 2 . unorderedList . map paragraph)
        [ "`wl-pprint` is the core package. It defines the language to generate nicely\
            \ laid out documents, which can then be given to renderers to display them in\
            \ various ways, e.g. HTML, or plain text."
        , "`wl-pprint-ansi` provides a renderer suitable for ANSI terminal output\
            \ including colors (at the cost of a dependency more)."
        , "`wl-pprint-compat-old` provides a drop-in compatibility layer for\
            \previous users of the old `wl-pprint`. Use it for easy adaption of\
            \ the new `wl-pprint`, but don't develop anything new with it."
        , "`wl-pprint-compat-old-ansi` is the same, but for previous users of `ansi-wl-pprint`."
        ]

    , h2 "Differences to the old Wadler/Leijen prettyprinter"

    , paragraph  "The library originally started as a fork of `ansi-wl-pprint` until\
        \ every line had been touched. The result is still in the same spirit\
        \ as its predecessors, but modernized to match the current ecosystem \
        \ and needs."
    , paragraph  "The most significant changes are:"
    , (indent 2 . orderedList . map paragraph)
        [ "`(<$>)` is removed as an operator, since it clashes with the common alias for `fmap`."
        , "All but the essential `<>` and `<+>` operators were removed or replaced by ordinary names."
        , "Everything extensively documented, with references to other functions and runnable code examples."
        , "Use of `Text` instead of `String`."
        , "A `fuse` function to optimize often-used documents before rendering for efficiency."
        , "Instead of providing an own colorization function for each\
          \ color/intensity/layer combination, they have been combined in 'color'\
          \ 'colorDull', 'bgColor', and 'bgColorDull' functions."
        ]
    ]

paragraph :: Text -> Doc ann
paragraph = align . fillSep . map pretty . T.words

vspace :: Doc ann
vspace = hardline <> hardline

h1 :: Doc ann -> Doc ann
h1 x = vspace <> underlineWith "=" x

h2 :: Doc ann -> Doc ann
h2 x = vspace <> underlineWith "-" x

underlineWith :: Text -> Doc ann -> Doc ann
underlineWith symbol x = align (width x (\w ->
    hardline <> pretty (T.take w (T.replicate w symbol))))

orderedList :: [Doc ann] -> Doc ann
orderedList = align . vsep . zipWith (\i x -> pretty i <> dot <+> align x) [1::Int ..]

unorderedList :: [Doc ann] -> Doc ann
unorderedList = align . vsep . map ("-" <+>)

htmlComment :: Doc ann -> Doc ann
htmlComment = enclose "<!-- " " -->"
